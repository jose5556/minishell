Readline Library Functions

    readline:
        Reads a line of input from the user with editing capabilities.
    rl_clear_history:
        Clears the history of previously entered lines.
    rl_on_new_line:
        Informs the readline library that the cursor is on a new line.
    rl_replace_line:
        Replaces the current line buffer with a new string.
    rl_redisplay:
        Updates the display to show the current line buffer.
    add_history:
        Adds the most recent line to the history list.

C Standard Library Functions

    printf:
        Formats and prints data to standard output.
    malloc:
        Allocates memory dynamically.
    free:
        Frees memory allocated by malloc.
    write:
        Writes data to a file descriptor.
    access:
        Checks a file's accessibility (e.g., existence or permissions).
    open:
        Opens a file and returns a file descriptor.
    read:
        Reads data from a file descriptor.
    close:
        Closes a file descriptor.
    strerror:
        Returns a string describing an error code.
    perror:
        Prints an error message based on the last system error.

Process Management

    fork:
        Creates a new process (child process).
    wait:
        Waits for a child process to terminate.
    waitpid:
        Waits for a specific child process to terminate.
    wait3:
        Waits for a child process to terminate and collects resource usage.
    wait4:
        Similar to wait3 but allows specifying a process ID.
    exit:
        Terminates the current process.

Signal Handling

    signal:
        Sets a handler for a specific signal.
    sigaction:
        More advanced signal handling setup.
    sigemptyset:
        Initializes a signal set to be empty.
    sigaddset:
        Adds a signal to a signal set.
    kill:
        Sends a signal to a process or group of processes.

File and Directory Management

    getcwd:
        Gets the current working directory.
    chdir:
        Changes the current working directory.
    stat:
        Retrieves information about a file.
    lstat:
        Similar to stat but does not follow symbolic links.
    fstat:
        Retrieves file information from an open file descriptor.
    unlink:
        Removes a file.
    opendir:
        Opens a directory stream.
    readdir:
        Reads an entry from a directory stream.
    closedir:
        Closes a directory stream.

Execution and Redirection

    execve:
        Executes a program, replacing the current process.
    dup:
        Duplicates a file descriptor.
    dup2:
        Duplicates a file descriptor to a specific number.
    pipe:
        Creates a unidirectional data channel for interprocess communication.

Terminal and Environment

    isatty:
        Checks if a file descriptor refers to a terminal.
    ttyname:
        Returns the name of the terminal associated with a file descriptor.
    ttyslot:
        Finds the index of the terminal in /etc/ttys.
    ioctl:
        Performs device-specific input/output operations.
    getenv:
        Retrieves the value of an environment variable.
    tcsetattr:
        Sets terminal attributes.
    tcgetattr:
        Gets terminal attributes.

Termcap Functions

    tgetent:
        Loads a termcap entry for terminal initialization.
    tgetflag:
        Checks if a terminal capability is supported.
    tgetnum:
        Gets the numeric value of a terminal capability.
    tgetstr:
        Gets the string value of a terminal capability.
    tgoto:
        Returns a string for cursor movement based on position.
    tputs:
        Outputs a termcap string with padding.

---------------------------------------------------------

how to create variables and print it, ex:
VAR="value" 